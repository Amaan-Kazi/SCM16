start: statement+

statement: var_decl ";"
         | assign_stmt ";"
         | array_assign_stmt ";"
         | expression_stmt ";"
         | if_stmt
         | while_stmt
         | for_stmt
         | func_decl
         | return_stmt ";"

var_decl: (TYPE NAME ("=" expression)?) | array_decl // int a | int a = 5
assign_stmt: NAME "=" expression                     // a = 20
expression_stmt: expression                          // for function calls like print(a);


// ARRAYS //
array: TYPE NAME "[" expression "]" ("[" expression "]")*
array_decl: array ("=" array_init)?
array_init: array_init_elements | ("{" (array_init_elements | array_init) "}" ("," "{" (array_init_elements | array_init) "}")*)
array_init_elements: (expression ("," expression)*)

array_access: "[" expression "]" ("[" expression "]")*
array_assign_stmt: NAME array_access "=" expression 


// CONDITIONS & LOOPS //
if_stmt: "if" "(" expression ")" block ("else" block)?                                 // if () {} optional(else {})
while_stmt: "while" "(" expression ")" block                                           // while () {}
for_stmt: "for" "(" (var_decl | assign_stmt) ";" expression? ";" assign_stmt ")" block // for () {}


// FUNCTIONS //
func_decl: TYPE NAME "(" param_list? ")" block // int func (int a, string b) {}
param_list: (TYPE NAME) ("," TYPE NAME)*       // int a, string b
return_stmt: "return" expression?              // return func(a); | return a;


block: "{" statement* "}" // {}

expression: left_parenthesis* term right_parenthesis* left_parenthesis* ( operator left_parenthesis* term right_parenthesis* )*

term: (NAME array_access)
     | NAME    -> var
     | NUMBER  -> num
     | BOOLEAN -> bool
     | STRING  -> str_literal
     | func_call

operator: "+"  -> add
        | "-"  -> subtract
        | "*"  -> multiply
        | "/"  -> divide
        | "%"  -> modulus
        | "==" -> equal
        | "!=" -> not_equal
        | "<"  -> less_than
        | "<=" -> less_than_or_equal
        | ">"  -> greater_than
        | ">=" -> greater_than_or_equal

left_parenthesis:  "("
right_parenthesis: ")"

func_call: NAME "(" arg_list? ")"
arg_list: expression ("," expression)*


TYPE: "int" | "bool" | "string"
NAME: /[a-zA-Z_][a-zA-Z0-9_]*/
NUMBER: /-?\d+/
BOOLEAN: "true" | "false"
STRING: /"[^"]*"/

%ignore /\/\/[^\n]*/     // Ignore everything after //
%import common.WS_INLINE // Import common whitespace handling
%ignore WS_INLINE        // Ignore inline whitespace
%ignore /\s+/            // Ignore spaces and tabs
