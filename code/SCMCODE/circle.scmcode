// Bresenham's Circle Drawing Algorithm //

// Screen Size: 96x64
int xi = 48;
int yi = 32;
int radius = 30;

// Black Screen
color(0, 0, 0);
fill();

int d = 3 - (2 * radius);
int x;
int y = radius;
int firstPass = 1; // allows behaviour like do while loop

while ((x <= y) || (firstPass == 1)) {
    firstPass = 0;

    // 8 Way Symmetry
    color(255, 36, 36);
    putpixel(xi+x, yi+y);
    putpixel(xi+y, yi+x);

    color(247, 244, 30);
    putpixel(xi+y, yi-x);
    putpixel(xi+x, yi-y);

    color(44, 212, 11);
    putpixel(xi-x, yi-y);
    putpixel(xi-y, yi-x);

    color(4, 118, 199);
    putpixel(xi-y, yi+x);
    putpixel(xi-x, yi+y);

    if (d >= 32768) { // d < 0 as unsigned [max = 65535]
        d = d + (4 * x) + 6;
    }
    else {
        d = d + (4 * (x - y)) + 10;
        y = y - 1;
    }

    x = x + 1;
}

int result = 100;
